# Telegram Bot
# telegram_config_file: telegram_config.yml


# Dataset and Splits
storage_folder: DATA
dataset_class: dataset.CIFAR10
data_splits_file:  DATA_SPLITS/CIFAR10/CIFAR10_outer1_inner1.splits


# Hardware
device:  cuda
max_cpus:  64
max_gpus: 3
gpus_per_task:  0.5
# gpus_subset: 0,1,2,3,4,5,6,7,8


# Data Loading
dataset_getter: mlwiz.data.provider.DataProvider
data_loader:
  class_name: torch.utils.data.DataLoader  # dataset is not a graph, but we use general PyG data utilities
  args:
    num_workers : 2
    pin_memory: True


# Reproducibility
seed: 42

# Experiment
result_folder: RESULTS/LOCAL_SEARCH/CNN/
exp_name: resnet20_fixed
experiment: experiment.LocalSearchExperiment
higher_results_are_better: True  # classification
evaluate_every: 1
model_selection_training_runs: 1
risk_assessment_training_runs: 1


grid:

  model: model.ResNet20
  checkpoint: False
  shuffle: True
  batch_size: 128
  epochs: 200

  # Model specific arguments #
  local_search_budget: 5
  min_neurons: 0
  max_neurons: 512
  # ------------------------ #

  # Optimizer
  optimizer:
    - class_name: mlwiz.training.callback.optimizer.Optimizer
      args:
        optimizer_class_name: torch.optim.SGD
        lr: 0.1
        weight_decay: 0.0001
        momentum: 0.9

  # Scheduler (optional)
  scheduler:
    - class_name: scheduler.CifarScheduler
      args:
        scheduler_class_name: torch.optim.lr_scheduler.MultiStepLR
        gamma: 0.1
        max_epochs: 200  # this is used by CifarScheduler to create "milestones" and pass it to MultiStepLR

  # Loss metric (with an example of Additive Loss)
  loss: mlwiz.training.callback.metric.MulticlassClassification

  # Score metric
  scorer:
    - class_name: mlwiz.training.callback.metric.MultiScore
      args:
        main_scorer: mlwiz.training.callback.metric.MulticlassAccuracy
        ce_loss: mlwiz.training.callback.metric.MulticlassClassification

  # Training engine
  engine: mlwiz.training.engine.TrainingEngine

  # Gradient clipper (optional)
  gradient_clipper: null

  # Early stopper (optional, with an example of "patience" early stopping on the validation score)
  early_stopper:
    - class_name:
        - mlwiz.training.callback.early_stopping.PatienceEarlyStopper
      args:
        patience:
          - 200
        # SYNTAX: (train_,validation_)[name_of_the_scorer_or_loss_to_monitor] -> we can use MAIN_LOSS or MAIN_SCORE
        monitor: validation_main_score
        mode: max  # is best the `max` or the `min` value we are monitoring?
        checkpoint: False  # store the best checkpoint

  # Plotter of metrics
  plotter: mlwiz.training.callback.plotter.Plotter
